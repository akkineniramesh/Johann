
Lambda-calculus with join. \label{sec:thesis/skj}

  Having developing pure lambda-calculus and combinatory algebra
  (the system SK) in section \ref{sec:thesis/sk},
  we note that embeddings into SK are a bit sloppy.
  By extending combinatory algebra with a notion of _ambiguity_
  (the join operation under Scott's information ordering, say SKJ),
  we show that embeddings can be made cleaner by representing symmetries
  of the embedded systems.
  As a side-effect of adding joins,
  we discover in SKJ an extensional type system of types-as-closures.
  We adapt a similar type system of Dana Scott (Scott67)
  from its Dinfty model setting to our present finitely-generated setting.
  Finally we demonstrate universality by defining embeddings of
  some common computable structures into SKJ.

  In summary
  Design Goals: 
    * express symmetry (as computably enumerable monoids),
    * compile/eliminate restricted universal quantifiers, and
    * represent images of embeddings as "natural" substructres.
  Approach: 
    * Add ambiguity to express symmetry (extend with ACI, in particular join);
    * develop an extensional type theory (types-as-closures).

  Ambiguity in lambda calculus. \label{sec:thesis/skj:ambiguity}

    History: 
      The parallel conditional was introduced by Plotkin in Plotking77,
      when he showed that P(omega) model of the typed language PCF
      was not fully abstract.
      From our untyped perspective, the problem was that the notions of
      operational and semantic equivalence
      universally quantify over sets of inhabitants that are "too small";
      plotkin add the extra elements (parallel functions)
      to operationally separate P(omega)-distinct terms.
 
      #XXX dezani examined parallelism vs nondeterminism

    How cleanly do structures embed into SK?
    Do embeddings preserve universally quantified statements
    (where quantifiers broaden to all of SK rather than just the image)?
    Are embedded images themselves natural substructures of SK?
    No, No, and No: our attempt at a universal system so far has major flaws.

    Note: (ambiguity vs parallelism vs nondeterminism)
      The notions of ambiguity, parallelism, and nondeterminism all satisfy the
      ACI axioms, (indeed in SKJ or P(omega),
      the theories of parallelism and ambiguity coincide)
      But are they are all distinct phenomena.

      The situation becomes clearer when we add yet another phenomenon:
      randomness.
      Thus we postpone discussion until \ref{sec:thesis/skrj}.
      
      #XXX randomness separates ambiguity vs parallelism

  Takeout: OLD
    A common idiom in expressing objects is to represent them in a redundant
    language, and then quotient or ambiguate away the redundancy.
    Eg: Real numbers might be sets of rationals,
      and two such sets are equivalent if they share a supremum.
    Eg: SK is a set of terms modulo a theory.
    Eg: In physics, a potential field is unique only up to a constant shift.
    In general, we describe not only objects but the symmetries they obey.
    The set of symmetries is often a group, but more generally a _monoid_:
    some symmetry transformations are irreversible.
    Eg: If #f:[0,inf)->Reals# satisfies a homogenous differential
      equation, then also does #t|->f(t+1)#.
    Eg: If #{x_n}# is a convergent sequence representing an object of a
      completed space, than any of its tails represent the same object.

  Type as symmetry. \label{sec:thesis/skj/symmetry}

    Let #M=<g1,g2,...,gn># be a monoid generated by a finite set of
    transformations.
    If we extend the lambda-calculus by an associative commutative
    idempotent operation #x|y# (i.e. satisfying the ACI axioms),
    we can construct an idempotent object for each _symmetry_type_
    ###[
      [[M]] = (Y\a. I | a*([[g1]]|[[g2]]|...|[[gn]]))
    ###]
    so that #[[M]]# fixes exactly the objects symmetric under M.
    Moreover, for any object #x#, #[[M]]x# is an object symmetric under M.
    We thus write "x is of type #[[M]]#" (#x:[[M]]#)
    iff x is fixed by #[[M]]# (#x=[[M]]x#).

    Eg: SK contains no symmetric function #or# with truth values
      ###[
        or K K = K
        or K F = K
        or F K = K
        or F F = F
      ###]
      we have two implementations
      ###[
        or1 := (\x,y. x K y).
        or2 := (\x,y. y K x).
      ###]
      but want something symmetric under
      ###[
        C = \f,x,y. f y x
      ###]
      Thus construct the symmetry type
      ###[
        Symmetric_binary_function = (Y\a. I|a*\f,x,y. f y x) = I|C.
      ###]
      and construct a symmetric
      ###[
        or = Symmetric_binary_function or1
           = Symmetric_binary_function or2
      ###]
      (this will soon be revised).

    We have extended lambda-calculus by an ACI binary operation,
    but now our equational theory is no longer complete:
    #XXX what is info ordering?
    we need to relate ambiguity with the information ordering on terms.
    Surely ambiguity must be monotone
    ###[
      x[=x'   y[=y'
      -------------
        x|y[=x'|y'
    ###]
    but how does #x|y# relate to x?
    Two obvious choices are ambiguity-as-join #x|y=]x,y#
    and ambiguity-as-meet #x|y[=x,y#.


Takeout: #OLD -------------------------------------------------------------

  The goal of this thesis is to develop "automated aesthetics" tools for
  dealing with formal systems ( = language + logic),
  using ideas from probability theory and algorithmic complexity.
  In this chapter we begin by finding an [almost] universal structure
  into which other formal systems embed.
  In the following two chapters we will extend the language
  to express the additional concepts of randomness and higher mathematics;
  it turns out that these both fit neatly into the present system.

  For a thorough introduction to the untyped lambda-calculus,
  see Barendredgt's thorough reference Barendregt84.
  Historical references: CurryFeys58, Church41.
  #XXX others?

  Notation: 
    * Combinators denote their equivalence class under H*.
    * Closed lambda-terms denote combinators under bracket abstraction.

  Extensional lambda-calculus. \label{sec:thesis/skj:lambda}

    Takeout: #OLD
      Complex languages are difficult to analyze.
      One feature complicating languages is _variable_binding_,
      or grammar rules about substutution, definition, and scope of variables.
      In an attempt to found mathematics on a variable-free language,
      Haskell Curry built on earlier work by Schonfinkle to embed some of
      predicate logic into a partucilar finitely-based algebra into which
      variable-binding languages could be compiled: combinators.

    #XXX why turing-complete programming languages

    Among Turing-complete programming languages,
    the grammatically simplest is by far combinatory algebra,
    a language discovered by Moses Shoenfinkel and developed by Haskell Curry.
    Before developing combinatory algebra,
    we will develop the closely related but easier to read
    language of lambda-calculus developed by Church and Kleene.

