
(2009:03:10)

(N1) A very accurate profile
  (N1) negative order doesn't really take much time.
  (N2) associativity_6 involves a nested pair of Rxx Lxx iterators.
    associativity of B,J could be implemented in compose and join tables.
    associativity of P doesn't take much time.
  (N3) the next few most expensive involve Axx iterators.
    These could, in an optimized version, all be combined into
    a pair of Axx iterators, one for each of lhs and rhs.
  (N4) Together, the xxx'd rules take 65.7% of the total time,
    and 90.6% of the enforce_E time
  %time  name
   ...
   86.1  E::Iterator<ALR>::next ()
   ...
   72.5  TypedTheory::enforce_E (Eqn) const
   ...
   17.8  enforce_E_C_E (Eqn)
   17.7  enforce_E_S_E (Eqn)
   16.7  enforce_E_Join_pos (Eqn)
   14.6  EX::parse_ob (Ob, bool)
   14.6  EX::parse_small (Ob, unsigned int)
   14.5  EX::find_parse_app (Ob)
   13.9  enforce_E_B_E (Eqn)
   ...
   12.9  enforce_E_distrib_rapply_E (Ob, Eqn)

   12.7  EX::get_expr (ExprHdl, bool)

   12.3  TypedTheory::enforce_N (Ord) const
   12.3  LatticeTheory::enforce_N (Ord) const

   12.0  XXX enforce_N_mono_N (Ord) XXX
   11.6  enforce_E_associativity_E (Ob, Eqn)
   10.8  XXX enforce_E_associativity_E6 (Ob, Eqn) XXX

    9.0  MagmaTheory::check (StmtHdl, string, unsigned int)
    9.0  Kernel::_check_stmt (std::pair<std::pair<StmtHdl*, unsigned>, string*>)
    9.0  Kernel::SyntaxFunction<std::pair<std::pair<StmtHdl*, unsigned>, string*>, Symbols::Trool>::run ()

    9.0  XXX enforce_E_C_E3 (Eqn) XXX
    8.8  XXX enforce_E_S_E3 (Eqn) XXX
    8.8  XXX enforce_E_B_E3 (Eqn) XXX
    8.8  XXX enforce_E_distrib_rapply_E1 (Ob, Eqn) XXX

    8.0  EX::Const::_called_by (EX::StructlFun&)
    8.0  EX::Simplify::of_atom (string const&)
    8.0  EX::Simplify::of_app (Expr&, Expr&) <cycle 4>
    7.8  XXX enforce_E_C_E5 (Eqn) XXX
    7.8  XXX enforce_E_S_E6 (Eqn) XXX
    5.9  Eqn E::find_key<ALR> (Ob, Ob)
    4.7  MagmaTheory::assume (StmtHdl, string)
    4.7  Kernel::_assume_stmt (std::pair<StmtHdl*, string*>)
    4.7  Kernel::SyntaxFunction<std::pair<StmtHdl*, string*>, bool>::run ()
    4.0  EX::GetExpr::of_app (Expr&, Expr&) <cycle 4>
    3.9  enforce_E_P_E (Eqn)
    3.9  XXX enforce_E_distrib_rapply_E4 (Ob, Eqn) XXX
    3.1  Contexts::Expand::of_app (Expr&, Expr&) <cycle 4>
    2.2  dense_set::iterator::next ()
    2.1  enforce_E_mu_N (Eqn)
    1.9  yyparse ()
    1.9  start_parser (void*)
    1.7  Contexts::Context::expand (ExprHdl, unsigned int) const
    1.3  Kernel::expand (ExprHdl, int)
    1.3  CS::get_app (Ob, Ob)
    1.3  Kernel::expand (StmtHdl, int)
    1.3  Statements::Relationship::map (ExprFun const&)
    1.3  Kernel::Expander::operator () (ExprHdl const&) const
    0.9  Contexts::Context::_name (EX::VarHdl, ExprHdl)
    0.8  MagmaTheory::query (StmtHdl, unsigned int)
    0.8  LambdaTheory::query_reln (ExprHdl, Symbols::Relation, ExprHdl, unsigned int)
    0.8  MagmaTheory::query_reln (ExprHdl, Symbols::Relation, ExprHdl, unsigned int)
    0.8  EX::find_expr (ExprHdl)
    0.7  CS::ensure_app (Ob, Ob, Ob)
    0.7  EX::FindExpr::of_app (Expr&, Expr&) <cycle 4>
    0.6  E::RangeIterator<ALR>::next ()
    0.6  define (EX::PattHdl, ExprHdl)
    0.6  EX::simplify (ExprHdl, double, bool)
    0.6  enforce_E_S_E5 (Eqn)
    0.6  enforce_E_B_E4 (Eqn)
    0.5  enforce_E_B_E5 (Eqn)
    0.5  enforce_E_C_E4 (Eqn)
    0.5  enforce_E_associativity_E7 (Ob, Eqn)
    0.5  enforce_E_C_E2 (Eqn)
    0.5  Contexts::Context::define (EX::PattHdl, ExprHdl)
    0.5  EX::VarPatt::define (EX::Definable&, ExprHdl) const
    0.5  Contexts::Context::operator () (EX::VarHdl, ExprHdl)
    0.5  TB::Brain::calc_measures (bool)
    0.4  TB::Brain::_init_misc (bool)
    0.4  Kernel::SyntaxCommand<int>::run ()
    0.4  Kernel::_nap (int)
    0.4  Contexts::Context::simplify (bool)
    0.4  dense_set::iterator::_next_block ()
    0.4  TB::Brain::update (bool)
    0.4  Kernel::SyntaxFunction<unsigned int, int>::run ()
    0.4  Kernel::_recompile_context (unsigned int)
    0.3  enforce_E_nu_N (Eqn)
    0.3  C::calc_R (Languages::Langauge&, T::Interest&)
    0.3  CS::ensure_nless (Ob, Ob)
    0.3  Kernel::_name_expr (std::pair<std::pair<string, ExprHdl*>, string*>)
    0.3  Kernel::SyntaxFunction<std::pair<std::pair<string, ExprHdl*>, string*>, bool>::run ()
    0.3  dense_bin_rel::ensure_inserted (dense_set const&, int, void  (*) (int, int))
    0.2  dense_set::ensure (dense_set const&, dense_set&)
    0.2  enforce_N_ord_neg (Ord)
    0.2  enforce_E_S_E2 (Eqn)
    0.2  E::RangeIterator<ARL>::begin (Ob, Ob)
    0.2  Kernel::SyntaxFunction<string, bool>::run ()
    0.2  Kernel::_load (string)
    0.2  TB::Brain::load (string)
    0.2  Kernel::Restart::_run ()
    0.2  Kernel::Restart::_call ()
    0.2  Kernel::_restart ()
    0.2  TB::Brain::initialize (unsigned int, std::set<string, std::less<string>, std::allocator<string>> const&)
    0.2  CS::enforce_atom (string const&)
    0.2  CS::assume_reln (Ob, Symbols::Relation, Ob)
    0.2  CS::assume_equiv (Ob, Ob)
    0.2  E::RangeIterator<ALR>::begin (Ob, Ob)
    0.2  enforce_E_S_E4 (Eqn)
    0.2  enforce_E_distrib_rapply_E7 (Ob, Eqn)
    0.2  CS::ensure_equiv (Ob, Ob)
    0.2  enforce_E_associativity_E4 (Ob, Eqn)
    0.1  Statements::Conjunction::map (ExprFun const&)
    0.1  C::calc_Z (Languages::Langauge&)
    0.1  enforce_N_transitivity_N1 (Ord)
    0.1  enforce_N_transitivity_N2 (Ord)
    0.1  C::_calc_comp_part (Languages::Langauge&, Eqn::array<double>&)
    0.1  TypedTheory::enforce_L (Ord) const
    0.1  ExtnTheory::enforce_L (Ord) const
    0.1  LatticeTheory::enforce_L (Ord) const
    0.1  enforce_E_C_E1 (Eqn)
    0.1  E::RangeIterator<ARL>::next ()
    0.1  void E::splay<ALR> (Eqn)

(2009:03:09) (year or so after implementing splay trees)
(N2) After merging N_mu_N + N_nu_N = N_mono_N
  This is a successful experiment in combining Axx_Iterator searches.
  (N1) Note that enforce_N is now 30.9% of enforce_E, was previously 51.2%.

  %time  name
  -------------------------------------------------------
   ...
   84.2  E::Iterator<ALR>::next ()

   71.5  TypedTheory::enforce_E (Eqn) const
   22.1  TypedTheory::enforce_N (Ord) const

   21.3  enforce_N_mono_N (Ord)
   17.0  enforce_E_C_E (Eqn)
   16.9  enforce_E_Join_pos (Eqn)
   16.1  enforce_E_S_E (Eqn)
   13.3  enforce_E_associativity_E (Ob, Eqn)
   13.1  enforce_E_B_E (Eqn)
   12.5  enforce_E_distrib_rapply_E (Ob, Eqn)

   11.7  enforce_E_associativity_E6 (Ob, Eqn)
    8.0  enforce_E_C_E3 (Eqn)
    7.7  enforce_E_S_E3 (Eqn)
    7.7  enforce_E_B_E3 (Eqn)
    7.7  enforce_E_distrib_rapply_E1 (Ob, Eqn)
    7.6  enforce_E_S_E6 (Eqn)
    7.6  enforce_E_C_E5 (Eqn)
   
    5.8  EX::parse_ob (Ob, bool)
    5.8  EX::parse_small (Ob, unsigned int)
    5.8  EX::find_parse_app (Ob)
    5.4  MagmaTheory::assume (StmtHdl, string)
    5.4  MagmaTheory::_assume (StmtHdl, bool)
    5.4  LambdaTheory::assume_reln (ExprHdl, Symbols::Relation, ExprHdl, bool)
    5.4  MagmaTheory::assume_reln (ExprHdl, Symbols::Relation, ExprHdl, bool)
    5.4  Kernel::_assume_stmt (std::pair<StmtHdl*, string*>)
    5.4  Kernel::SyntaxFunction<std::pair<StmtHdl*, string*>, bool>::run ()
    5.3  EX::get_expr (ExprHdl, bool)

    4.5  enforce_E_distrib_rapply_E4 (Ob, Eqn)
    4.4  enforce_E_P_E (Eqn)
    3.7  EX::Simplify::of_app (Expr&, Expr&) <cycle 3>
    3.4  enforce_E_mu_N (Eqn)
    3.1  EX::Const::_called_by (EX::StructlFun&)
    3.1  EX::Simplify::of_atom (string const&)
    1.9  Eqn E::find_key<ALR> (Ob, Ob)
    1.6  EX::GetExpr::of_app (Expr&, Expr&) <cycle 3>
    1.6  E::RangeIterator<ALR>::next ()
    1.5  CS::ensure_app (Ob, Ob, Ob)
    1.2  enforce_E_associativity_E7 (Ob, Eqn)
    1.2  dense_set::iterator::next ()
    0.8  Contexts::Expand::of_app (Expr&, Expr&) <cycle 3>
    0.8  E::RangeIterator<ARL>::begin (Ob, Ob)
    0.8  enforce_N_ord_neg (Ord)
    0.8  CS::ensure_nless (Ob, Ob)
    0.8  dense_bin_rel::ensure_inserted (dense_set const&, int, void  (*) (int, int))
    0.7  dense_set::ensure (dense_set const&, dense_set&)
    0.7  E::RangeIterator<ALR>::begin (Ob, Ob)
    0.7  enforce_E_C_E2 (Eqn)
    0.6  enforce_E_B_E5 (Eqn)
    0.6  enforce_E_C_E4 (Eqn)

(N1) A year-and-a-half after implementing splay trees.
  (N1) The slowest part is iterating with Axx_Iterator's,
    in each of most expensive functions.
  %time  name
  ---------------------------------------------------------
   ...

   74.0  E::Iterator<ALR>::next ()

   62.5  TypedTheory::enforce_E (Eqn) const
   32.0  TypedTheory::enforce_N (Ord) const

   16.0  enforce_N_mu_N (Ord)
   15.0  enforce_E_C_E (Eqn)
   14.8  enforce_N_nu_N (Ord)
   13.5  enforce_E_Join_pos (Eqn)
   13.4  enforce_E_S_E (Eqn)
   10.7  enforce_E_B_E (Eqn)
   10.5  enforce_E_associativity_E (Ob, Eqn)
   10.0  enforce_E_boolean_E (Ob, Eqn)

    9.0  enforce_E_associativity_E6 (Ob, Eqn)
    6.7  enforce_E_C_E3 (Eqn)
    6.2  enforce_E_S_E3 (Eqn)
    6.1  enforce_E_B_E3 (Eqn)
    6.1  enforce_E_boolean_E1 (Ob, Eqn)
    6.0  enforce_E_C_E5 (Eqn)
    6.0  enforce_E_S_E6 (Eqn)
    5.5  enforce_E_mu_N (Eqn)

    4.4  EX::parse_small (Ob, unsigned int)
    4.4  EX::parse_ob (Ob, bool)
    4.3  EX::find_parse_app (Ob)
    4.2  MagmaTheory::assume (StmtHdl, string)
    4.2  MagmaTheory::_assume (StmtHdl, bool)
    4.2  LambdaTheory::assume_reln (ExprHdl, Symbols::Relation, ExprHdl, bool)
    4.2  MagmaTheory::assume_reln (ExprHdl, Symbols::Relation, ExprHdl, bool)
    4.2  Kernel::_assume_stmt (std::pair<StmtHdl*, string*>)
    4.2  Kernel::SyntaxFunction<std::pair<StmtHdl*, string*>, bool>::run ()
    4.1  EX::get_expr (ExprHdl, bool)
    3.5  enforce_E_P_E (Eqn)
    3.5  enforce_E_boolean_E4 (Ob, Eqn)
    3.1  Eqn E::find_key<ALR> (Ob, Ob)
    2.8  EX::Simplify::of_app (Expr&, Expr&) <cycle 3>
    2.4  CS::ensure_app (Ob, Ob, Ob)
    2.4  EX::Const::_called_by (EX::StructlFun&)
    2.4  EX::Simplify::of_atom (string const&)
    2.0  dense_set::iterator::next ()
    1.3  E::RangeIterator<ARL>::begin (Ob, Ob)
    1.3  EX::GetExpr::of_app (Expr&, Expr&) <cycle 3>
    1.2  E::RangeIterator<ALR>::next ()
    1.2  enforce_N_ord_neg (Ord)
    1.2  CS::ensure_nless (Ob, Ob)
    1.2  dense_bin_rel::ensure_inserted (dense_set const&, int, void  (*) (int, int))
    1.2  dense_set::ensure (dense_set const&, dense_set&)
    1.1  enforce_E_C_E2 (Eqn)
    1.1  E::RangeIterator<ALR>::begin (Ob, Ob)
    1.0  enforce_E_associativity_E7 (Ob, Eqn)


(2007:10:01-03) (After reimplementing dense_bin_rel)
(N2) After inlining find_app and getRep, the profile reduces to
  Each sample counts as 0.01 seconds.
    %time   calls   name
    --------------------
    15.02 154769314 E::Iterator<ALR>::findKey (Ob)
     9.29 112640066 E::Iterator<ALR>::move_leftStar ()
     8.82 260539802 E::Iterator<ALR>::next ()
     7.48  60541939 E::Iterator<ARL>::findKey (Ob)
     6.31 666073447 _Heap::_heap_Vindex (unsigned int, unsigned int)
     5.82     63745 enforce_E_mu_N (Eqn)
     5.56 672760989 _Heap::_heap_Hindex (unsigned int)
     5.05 154769314 E::RangeIterator<ALR>::begin (Ob, Ob)
     4.15  46221596 CS::ensure_app (Ob, Ob, Ob)
     3.16 151601412 dense_set::iterator::next ()
     2.37  14099152 CS::ensure_nless (Ob, Ob)
     2.29   2807926 dense_set::ensure (dense_set const&, dense_set&)
     2.10  47634417 CS::ensure_equiv (Ob, Ob)
     1.59    190935 enforce_E_associativity_E6 (Ob, Eqn)
     1.27     63745 enforce_E_C_E3 (Eqn)
     1.24     63745 enforce_E_S_E3 (Eqn)
     1.19     63595 enforce_E_boolean_E1 (Ob, Eqn)
     1.17  60541939 E::RangeIterator<ARL>::begin (Ob, Ob)
     1.14     63745 enforce_E_B_E3 (Eqn)
     1.11     63745 enforce_E_C_E5 (Eqn)
     1.02     63745 enforce_E_nu_N (Eqn)
     0.77   1395073 enforce_N_nu_N (Ord)
     0.75     63745 enforce_E_C_E2 (Eqn)
     0.74   1395073 enforce_N_mu_N (Ord)
     0.74     63745 enforce_E_C_E4 (Eqn)
     0.73  13586050 dense_set::iterator::_next_block ()
     0.71    190935 enforce_E_associativity_E4 (Ob, Eqn)
     0.71        78 C::calc_R (M::Language&, T::Interest&)
     0.66     63745 enforce_E_S_E6 (Eqn)
     0.59     63745 enforce_E_S_E2 (Eqn)
     0.52     63745 enforce_E_S_E4 (Eqn)
     0.43   1401972 std::_Rb_tree<Ord, Ord>::insert_unique (Ord const&)
     0.41     63745 enforce_E_B_E4 (Eqn)
     0.39     63745 enforce_E_S_E5 (Eqn)
     0.36     63595 enforce_E_boolean_E2 (Ob, Eqn)
     0.36     63595 enforce_E_boolean_E7 (Ob, Eqn)
     0.34    199560 dense_set::size () const
     0.26     63595 enforce_E_boolean_E4 (Ob, Eqn)
     0.19        81 C::calc_Z (M::Language&)
     0.16   1248795 CS::ensure_less (Ob, Ob)
     0.16      4992 enforce_L_Join_L1 (Ord)
     0.15        78 C::_calc_comp_part (M::Language&)
     0.14   1612466 CS::ensure_apps (Ob, Ob, Ob, Ob)
     0.12    254980 dense_set::set_insn (dense_set const&, dense_set const&)
     0.12    112235 void E::insert<ALR> (Eqn)
     0.12       669 CS::saturate ()
     0.11    190935 enforce_E_associativity_E2 (Ob, Eqn)
     0.10   2799036 dense_bin_rel::ensure_inserted (dense_set const&, int, void  (*) (int, int))
     0.10   1401941 std::_Rb_tree<Ord, Ord>::_M_insert (...) #internal
     0.09   1395073 enforce_N_transitivity_N1 (Ord)
     0.09    112235 void E::insert<ARL> (Eqn)
     0.07   2230587 E::RangeIterator<ALR>::next ()
     0.07     63745 enforce_E_mu_L (Eqn)
     0.06   1395073 TypedTheory::enforce_N (Ord) const
     0.06    190935 enforce_E_associativity_E1 (Ob, Eqn)
     0.06     63745 enforce_E_B_E2 (Eqn)
     0.05   1506322 E::Iterator<ARL>::next ()
     0.05   1395073 enforce_N_transitivity_N2 (Ord)
     0.05    190935 enforce_E_associativity_E7 (Ob, Eqn)
     0.05     22945 E::Iterator<ALR>::findPair (Ob, Ob)
     0.05       113 RC::Generator::update_all ()
     0.05         5 dense_bin_fun::dense_bin_fun (int)
(N1) General function profile
  Each sample counts as 0.01 seconds.
    %time   calls   name
    --------------------
    14.82 270851338 E::find_app (Ob, Ob)
    12.37 154769314 E::Iterator<ALR>::findKey (Ob)
     7.88 112640066 E::Iterator<ALR>::move_leftStar ()
     7.65 260539802 E::Iterator<ALR>::next ()
     6.78  60541939 E::Iterator<ARL>::findKey (Ob)
     5.76 666073447 _Heap::_heap_Vindex (unsigned int, unsigned int)
     5.03 672760989 _Heap::_heap_Hindex (unsigned int)
     4.95 109331204 E::find_ldiv (Ob, Ob)
     4.65     63745 enforce_E_mu_N (Eqn)
     4.04 154769314 E::RangeIterator<ALR>::begin (Ob, Ob)
     2.77 151601412 dense_set::iterator::next ()
     2.38 271079446 Obs::getRep (Ob)
     1.85  14099152 CS::ensure_nless (Ob, Ob)
     1.84   2807926 dense_set::ensure (dense_set const&, dense_set&)
     1.80  47634417 CS::ensure_equiv (Ob, Ob)
     1.37  60541939 E::RangeIterator<ARL>::begin (Ob, Ob)
     1.04  46221596 CS::ensure_app (Ob, Ob, Ob)
     0.93     63745 enforce_E_nu_N (Eqn)
     0.67   1395073 enforce_N_nu_N (Ord)
     0.65  13586050 dense_set::iterator::_next_block ()
     0.60   1395073 enforce_N_mu_N (Ord)
     0.59        78 C::calc_R (Language&, Interest&)
     0.56     63745 enforce_E_C_E2 (Eqn)
     0.56     63745 enforce_E_C_E4 (Eqn)
     0.53     63745 enforce_E_C_E5 (Eqn)
     0.49     63745 enforce_E_S_E6 (Eqn)
     0.47     63745 enforce_E_B_E3 (Eqn)
     0.42    190935 enforce_E_associativity_E4 (Ob, Eqn)
     0.41     63745 enforce_E_C_E3 (Eqn)
     0.38     63595 enforce_E_boolean_E1 (Ob, Eqn)
     0.37    190935 enforce_E_associativity_E6 (Ob, Eqn)
     0.36     63745 enforce_E_S_E3 (Eqn)
     0.32     63745 enforce_E_S_E4 (Eqn)
     0.29    199560 dense_set::size () const
     0.28     63745 enforce_E_S_E2 (Eqn)
     0.28     63745 enforce_E_S_E5 (Eqn)
     0.26     63745 enforce_E_B_E4 (Eqn)
     0.26     63595 enforce_E_boolean_E2 (Ob, Eqn)
     0.23     63595 enforce_E_boolean_E7 (Ob, Eqn)
     0.23   1401972 std::_Rb_tree<Ord, Ord>::insert_unique (Ord const&)
     0.18        81 C::calc_Z (Language&)
     0.14    112235 void E::insert<ALR> (Eqn)
     0.14     63595 enforce_E_boolean_E4 (Ob, Eqn)
     0.12   1248795 CS::ensure_less (Ob, Ob)
     0.11      4992 LambdaTheories::enforce_L_Join_L1 (Ord)
     0.11        78 C::_calc_comp_part (Language&)
     0.10   2799036 dense_bin_rel::ensure_inserted (dense_set const&, int, ...)
     0.10    112235 void E::insert<ARL> (Eqn)
  In particular, transitivity drops down to 0.05% and 0.04% of the time.

(2007:09:28)
(N2) The vectorized enforcement schema are questionably faster, possibly slower.
(N1) Profile of axiom enforcement
  Each sample counts as 0.01 seconds.
    %time  calls name
    --------------------
    24.94 162767 N_transitivity_N1
    22.04 162767 N_transitivity_N2
     3.29  11584 E_nu_L
     2.61  11584 E_mu_L
     1.21  11584 E_mu_N
     0.34 162767 N_nu_N
     0.29  11584 E_C_E2
     0.24 162767 N_mu_N
     0.19  11584 E_C_E3
     0.19  11584 E_S_E3
     0.19  11584 E_S_E4
     0.19  11584 E_nu_N
     0.14  11584 E_C_E5
     0.14  11584 E_S_E5
     0.14  11584 E_S_E6
     0.10  11584 E_B_E3
     0.10  11584 E_C_E4
     0.10  11584 E_associativity_E6
     0.10    798 L_transitivity_L1
     0.10    798 L_transitivity_N2
     0.05 162767 N_Top_N
     0.05  11584 E_B_E4
     0.05  11584 E_B_E5
     0.05  11584 E_S_E1
     0.05  11584 E_S_E2
     0.05    798 L_transitivity_L2
     0.05    798 L_transitivity_N1
     0.00 162767 N_Bot_N
     0.00 162767 N_ord_neg
     0.00  11584 E_B_E
     0.00  11584 E_C_E
     0.00  11584 E_K_E
     0.00  11584 E_S_E
     0.00  11584 E_W_E
     0.00  11584 E_Y_E
     0.00  11584 E_Y_L
     0.00  11584 E_B_E1
     0.00  11584 E_B_E2
     0.00  11584 E_C_E1
     0.00  11584 E_W_E1
     0.00  11584 E_W_E2
     0.00  11584 E_W_E3
     0.00  11584 E_W_E4
     0.00  11584 E_Y_E1
     0.00  11584 E_Y_E2
     0.00  11584 E_Bot_N
     0.00  11584 E_Top_N
     0.00  11584 E_associativity_E
     0.00  11584 E_associativity_E1
     0.00  11584 E_associativity_E2
     0.00  11584 E_associativity_E3
     0.00  11584 E_associativity_E4
     0.00  11584 E_associativity_E5
     0.00  11584 E_associativity_E7
     0.00    798 L_Y_L
     0.00    798 L_mu_L
     0.00    798 L_nu_L
     0.00    798 L_Y_pos
     0.00    798 L_ord_neg
     0.00    798 L_ord_pos
     0.00    798 L_asymmetry_L
     0.00    258 O_I_E
     0.00    258 O_K_E
     0.00    258 O_Bot_L
     0.00    258 O_Top_L
     0.00    258 O_ord_L
  Among the callers of dense_set::iterator::next () are
    0.00    1019/243432065   E_associativity_E3
    0.00    2277/243432065   O_K_E
    0.00    3453/243432065   E_associativity_E5
    0.00    4286/243432065   E_W_E1
    0.00    7020/243432065   E_associativity_E2
    0.00    7279/243432065   E_associativity_E1
    0.00    9502/243432065   E_C_E1
    0.00   10903/243432065   L_mu_L
    0.00   13224/243432065   E_B_E1
    0.00   22449/243432065   L_nu_L
    0.00   43969/243432065   E_S_E1
    0.00   45153/243432065   E_B_E2
    0.00  286482/243432065   L_transitivity_N1
    0.00  286482/243432065   L_transitivity_N2
    0.00  286482/243432065   L_transitivity_L2
    0.00  286482/243432065   L_transitivity_L1
    0.00  286636/243432065   E_associativity_E4
    0.01  470194/243432065   E_C_E4
    0.01  470194/243432065   E_C_E2
    0.01  526397/243432065   E_nu_N
    0.01  601157/243432065   E_S_E2
    0.01  626166/243432065   E_S_E5
    0.01  626240/243432065   E_B_E4
    0.01  711988/243432065   E_S_E4
    0.06 4350153/243432065   E_mu_N
    0.20 14380132/243432065  E_nu_L
    0.20 14380132/243432065  E_mu_L
    1.43 102338544/243432065 N_transitivity_N2
    1.43 102338544/243432065 N_transitivity_N1
  (N1) transitivity is an excellent candidate for _vectorization_.
    Thus it should very much pay off to implement dense_bin_rel2,
    with a pair of dense_sets of dense_sets, one in either direction.

(2007:09:26)
(N3) After inlining L::Iterator<LRpos>::Iterator (Ob)
  Each sample counts as 0.01 seconds.
    %time     calls name
    --------------------
    46.71    162767 LatticeTheory::enforce_N (Ord) const
    12.52 243432065 dense_set::iterator::next ()
     8.22     11584 LatticeTheory::enforce_E (Eqn) const
     4.61  12921691 E::find_app (Ob, Ob)
     4.61   8097423 E::Iterator<ALR>::findKey (Ob)
     2.91  12854102 E::Iterator<ALR>::next ()
     2.84   6173118 E::Iterator<ALR>::move_leftStar ()
     2.15   3549991 E::Iterator<ARL>::findKey (Ob)
     1.52   5221139 E::find_ldiv (Ob, Ob)
     1.45  35674171 _Heap::_heap_Hindex (unsigned int)
     1.33  34583393 _Heap::_heap_Vindex (unsigned int, unsigned int)
     1.26   8097423 E::RangeIterator<ALR>::begin (Ob, Ob)
     1.07        67 C::calc_R (Measures::Language&, Thought::Interest&)
     1.01  14373050 CS::isNLessThan (Ob, Ob)
     0.82   8903647 nonstd::dense_set::iterator::_next_block ()
     0.63   3549991 E::RangeIterator<ARL>::begin (Ob, Ob)
     0.57   2239635 CS::ensure_nless (Ob, Ob)
     0.57     11584 enforce_E_C_E (Eqn)
     0.51  16144596 Obs::getRep (Ob)
     0.44   2252020 CS::isLessThan (Ob, Ob)
     0.44    163572 std::_Rb_tree<Ord>::insert_unique (Ord const&)
     0.44     11584 enforce_E_S_E (Eqn)
     0.44       100 nonstd::dense_bin_rel::size () const
     0.32        67 C::_calc_comp_part (Measures::Language&)
     0.25   2224644 CS::ensure_equiv (Ob, Ob)
     0.25     11584 LambdaTheory::enforce_E (Eqn) const
     0.25       798 LatticeTheory::enforce_L (Ord) const
     0.19     25913 void E::insert<ALR>(Eqn)
     0.19        70 C::calc_Z (Measures::Language&)
     0.13     63727 EX::App::build (ExprHdl const&, ExprHdl const&)
     0.13     17860 EX::App::~App ()
     0.13       129 RandomChoice::Generator::update_all ()
     0.06   2120576 CS::ensure_app (Ob, Ob, Ob)
     0.06    388598 E::Iterator<ALR>::begin ()
     0.06    281608 E::RangeIterator<ALR>::next ()
     0.06     83694 E::Iterator<ARL>::move_leftStar ()
  Among the callees of LatticeTheory::enforce_N (Ord) const are
    self  children    called         name
    -------------------------------------
    1.66    0.10 204677088/243432065 dense_set::iterator::next ()
    0.08    0.40 2864700/3549991     E::RangeIterator<ARL>::begin (Ob, Ob)
    0.07    0.35 2864700/8097423     E::RangeIterator<ALR>::begin (Ob, Ob)
    0.21    0.19 5731543/12854102    E::Iterator<ALR>::next ()
    0.03    0.05  754362/2239635     CS::ensure_nless (Ob, Ob)
    0.01    0.02  325895/388598      E::Iterator<ALR>::begin ()
    0.01    0.02  278572/281608      E::RangeIterator<ALR>::next ()
    0.00    0.01  128576/146161      E::RangeIterator<ARL>::next ()
    0.00    0.00  325534/8903647     dense_set::iterator::_next_block ()
  Among the callers of dense_set::iterator::next () are
    self  children    called         name
    -------------------------------------
    0.00    0.00       5/243432065   dense_bin_fun::merge (int, int, ..., ...)
    0.00    0.00      68/243432065   CS::enforce_atom (string const&)
    0.00    0.00    2277/243432065   LambdaTheory::enforce_O (Ob) const
    0.00    0.00    4286/243432065   enforce_E_W_E (Eqn)
    0.00    0.00    9053/243432065   dense_bin_fun::remove (int, void (*)(int))
    0.00    0.00  305407/243432065   enforce_E_associativity_E (Ob, Eqn)
    0.01    0.00  684617/243432065   LambdaTheory::enforce_E (Eqn) const
    0.01    0.00  949890/243432065   enforce_E_C_E (Eqn)
    0.01    0.00 1179280/243432065   LatticeTheory::enforce_L (Ord) const
    0.02    0.00 1983280/243432065   enforce_E_S_E (Eqn)
    0.27    0.02 33636814/243432065  LatticeTheory::enforce_E (Eqn) const
    1.66    0.10 204677088/243432065 LatticeTheory::enforce_N (Ord) const
(N2) Profiling expand-contract.
  Each sample counts as 0.01 seconds.
  %time     calls name    
  27.11    162767 enforce_N (Ord)
  17.89    186475 L::Iterator<LRpos>::Iterator (Ob)
  14.74 243432065 dense_set::iterator::next ()
   7.68     11584 enforce_E (Eqn)
   4.42   8097423 E::Iterator<ALR>::findKey (Ob)
   3.98  12921691 E::find_app (Ob, Ob)
   2.32   3549991 E::Iterator<ARL>::findKey (Ob)
   2.26  12854102 E::Iterator<ALR>::next ()
   1.71  35674171 _heap_Hindex (Int)
   1.71   6173118 E::Iterator<ALR>::move_leftStar ()
   1.49  34583393 _heap_Vindex (Int, Int)
   1.49   8097423 E::RangeIterator<ALR>::begin (Ob, Ob)
   1.21   5221139 E::find_ldiv (Ob, Ob)
   1.05   2250979 L::contains_pos (Ord)
   0.94  14373050 CS::isNLessThan (Ob, Ob)
   0.94    186475 L::Iterator<RLpos>::Iterator (Ob)
   0.88        67 C::calc_R (Language&, Interest&)
   0.77   2239635 L::ensure_inserted_neg (Ord)
   0.61   2224644 CS::ensure_equiv (Ob, Ob)
   0.61   1887514 L::contains_neg (Ord)
   0.61     11584 enforce_E_S_E (Eqn)
   0.55     11584 enforce_E_C_E (Eqn)
   0.50  16144596 Obs::getRep (Ob)
   0.44    163572 std::_Rb_tree<Ord>::insert_unique (const Ord&)
   0.33       798 enforce_L (Ord)
   0.33       100 dense_bin_rel::size ()
   0.33        70 C::calc_Z (Language&)
   0.28   2239635 CS::ensure_nless (Ob, Ob)
   0.22   3549991 E::RangeIterator<ARL>::begin (Ob, Ob)
   0.22     11584 enforce_E_associativity_E (Ob, Eqn)
   0.22       129 RC::Generator::update_all ()
   0.17     59436 std::_Rb_tree<std::pair<const ObName*, ObHdl*>::lower_bound
   0.17     25913 E::insert<ALR>(Eqn)
   0.17     11584 enforce_E (Eqn)
   0.11   2120576 CS::ensure_app (Ob, Ob, Ob)
   0.11    388598 E::Iterator<ALR>::begin ()
   0.11     63727 EX::App::build (const ExprHdl&, const ExprHdl&)
   0.11       540 L::Iterator<RLneg>::Iterator (Ob)
(N1) Ordering of rule-firing in saturation.
  (T1) Timing the think script
    ###[
      !load default
      !set size = 620
      !10 think
    ###]
    ###a
      time  queue type (P = priority, F = fifo)
      (sec) M O E L N
      ---------------
      21.8  P P P P P
      21.6  P P F P P
      21.8  P P F F F
    ###a
    There seems to be no significant difference.
    Analysing enforce.log, fifo is occasionally much better than priority,
    with far fewer E-enforcements.
  (T2) Timing the build script
    ###[
      !restart
      !set size = 1600 #with 1207 in core
      !using J V P.
      !think in {
          B                   @ 1,
          C,J                 @ 2,
          S,K,W,C I,V         @ 3,
          0,1,2,S B           @ 4,
          B',S',S I,Y,W I,P   @ 5
      }
      !read axioms/eta axioms/diverge.
      !read axioms/join axioms/close axioms/power axioms/types.
    ###]
    (V1) priority-eqn queues
      ###a
        real    4m25.091s
        user    4m24.313s
        sys     0m0.392s
      ###a
      and the two most expensive operations
      ###a
        2.4052  theory  Assuming C x y z = x z y
        2.80145 struct    Resizing combinatory structure to 281 obs
        3.88162 struct    Resizing combinatory structure to 310 obs
        5.11865 struct    Resizing combinatory structure to 342 obs
        5.3956  kernel    cost = 83 obs + 2031 eqns
        5.39571 theory  Assuming S x y z = x z(y z)
        6.04634 struct    Resizing combinatory structure to 377 obs
        7.38247 struct    Resizing combinatory structure to 415 obs
        8.76072 struct    Resizing combinatory structure to 457 obs
        11.0186 struct    Resizing combinatory structure to 503 obs
        15.0715 struct    Resizing combinatory structure to 554 obs
        17.9244 kernel    cost = 221 obs + 4131 eqns
      ###a
    (V2) FIFO-eqn queues
      ###a
        real    4m34.060s
        user    4m33.101s
        sys     0m0.592s
      ###a
      and the two most expensive operations
      ###a
        2.98681 theory  Assuming C x y z = x z y
        3.42632 struct    Resizing combinatory structure to 281 obs
        4.64152 struct    Resizing combinatory structure to 310 obs
        5.95066 struct    Resizing combinatory structure to 342 obs
        6.22934 kernel    cost = 83 obs + 2031 eqns
        6.22945 theory  Assuming S x y z = x z(y z)
        6.91233 struct    Resizing combinatory structure to 377 obs
        8.33489 struct    Resizing combinatory structure to 415 obs
        9.79043 struct    Resizing combinatory structure to 457 obs
        12.1999 struct    Resizing combinatory structure to 503 obs
        16.5152 struct    Resizing combinatory structure to 554 obs
        19.381  kernel    cost = 221 obs + 4131 eqns
      ###a
    Comparing enforce.log's:
    * almost always, PRIORITY's merges are followed by far fewer E enforcements
      than FIFO's. #XXX this may be a bug in fifo_queue.remove or so?
    * ocassionally, FIFO's o-enforcements are followed be about half as many E
      enforcements as PRIORITY's.

(2006:03:26)
(N2) without order, expanding from 4659 --> 4679 obs
  * 22.31% _heap_Hindex
  * 17.32% _heap_Vindex
  * 10.69% calc_explicit_complexity
  *  8.18% E::Iterator<Indexing<0, 1, 2, 0>>::move_leftStar
  *  7.65% E::Iterator<Indexing<0, 1, 2, 0>>::findKey
  *  7.50% find_app
  *  3.73% Obs::getRep
  *  3.49% E::RangeIterator<Indexing<0, 1, 2, 0>>::begin
  *  3.03% void insert<Indexing<0, 1, 2, 0>>
  *  2.67% E::Iterator<Indexing<0, 1, 2, 0>>::next
  *  2.32% void insert<Indexing<0, 2, 1, 1>>
  *  1.83% find_ldiv
  *  1.43% dense_set::iterator::next
  *  1.19% calc_explicit_relevance
  *  1.01% CS::ensure_app
  *  0.72% CS::ensure_equiv
  *  0.56% enforce_E_C_E4
  *  0.50% enforce_E_C_E2
  *  0.42% insert
  *  0.28% enforce_E_C_E3
  *  0.26% enforce_E_S_E5
  *  0.25% enforce_E_B_E4
  *  0.24% E::Iterator<Indexing<0, 2, 1, 1>>::findKey
  *  0.24% enforce_E_S_E4
  *  0.21% enforce_E_S_E3
  *  0.21% enforce_E_associativity_E4
  *  0.21% enforce_E_S_E6
  *  0.20% enforce_E_B_E3
  *  0.19% enforce_E_C_E5
  *  0.16% E::RangeIterator<Indexing<0, 2, 1, 1>>::begin
  *  0.14% enforce_E_associativity_E6
  *  0.14% test_heap_indexing #XXX: this must be an error
  *  0.10% enforce_E_S_E2
  ...

(2006:03:25:22)
(N1) after replacing enforce_app by enforce_mu and enforce_nu,
  * 18.50%   dense_set::iterator::next
  * 16.23% N_transitivity_N2
  *  6.49%   Iterator<L::Indexing<1, 1>>::Iterator
  *  4.92% N_transitivity_N1
  *  4.55%   _heap_Hindex
  *  4.14%   _heap_Vindex
  *  3.44%   Iterator<ALR>::move_leftStar
  *  3.24% E_associativity_E6
  *  3.09%   Iterator<ALR>::findKey
  *  2.66% N_mu_N
  *  2.44%   calc_explicit_complexity
  *  2.39% N_nu_N
  *  2.24% E_mu_N
  *  1.96%   Iterator<ALR>::next
  *  1.92%   find_app
  *  1.52%   RangeIterator<ALR>::begin
  *  1.51%   Obs::getRep
  *  1.33% E_nu_L
  *  1.23% E_mu_L
  *  1.07%   dense_bin_rel::Iterator<1>::_move_pos
  *  1.04% E_S_E6
  *  1.03%   dense_set::iterator::begin
  *  0.96% E_B_E3
  *  0.86%   Iterator<ARL>::findKey
  *  0.86% E_C_E5
  *  0.79% E_S_E3
  *  0.77% E_C_E3
  *  0.74%   find_ldiv
  *  0.67%   CS::isNLessThan
  *  0.64% E_associativity_E4
  *  0.43% E_nu_N
  ...
(N1) now transitivity is the slowest
(N2) even in the equational fragment, associativity_E6 is expensive
  * 6.46% E_app_N4
  * 5.10% E_app_N2
  * 4.37% E_app_N3
  * 1.92% E_app_N1
  * 1.53% E_app_L2
  * 1.27% L_app_N2
  *  .55% E_app_N4
  *  .54% E_app_L1
  *  .46% L_app_L2
  *  .39% L_app_N1
  *  .33% L_app_L1
  ...and then E_[SBCW]_E[0-9]...
(N2) misc expensive operations (with order)
  * 13.32% nonstd::dense_set::iterator::next()
  * 8.86% _Heap::_heap_Vindex(Int, Int)
  * 6.56% C::calc_explicit_complexity(std::vector<std::pair<_Heap::_Handle<Nodes::_ObSignature>, float>, std::allocator<std::pair<_Heap::_Handle<Nodes::_ObSignature>, float>>> const&, float, float)
  * 5.57% Obs::getRep(_Heap::_Pos<Nodes::_ObSignature>)
  * 4.98% E::Iterator<ALR>::findKey(_Heap::_Pos<Nodes::_ObSignature>)
  * 4.79% _Heap::_heap_Hindex(Int)
  * 4.35% E::Iterator<ALR>::move_leftStar()
  * 3.53% E::find_app(_Heap::_Pos<Nodes::_ObSignature>, _Heap::_Pos<Nodes::_ObSignature>)
  * 2.86% L::contains_neg(Ord)
  * 2.59% L::contains_pos(Ord)
  * 2.27% E::RangeIterator<ALR>::begin(_Heap::_Pos<Nodes::_ObSignature>, _Heap::_Pos<Nodes::_ObSignature>)
  * 2.23% E::Iterator<ALR>::next()
  * 2.19% CS::isNLessThan(_Heap::_Pos<Nodes::_ObSignature>, _Heap::_Pos<Nodes::_ObSignature>)
  * 1.92% void E::insert<ALR>(_Heap::_Pos<Nodes::_ESignature>)
  * 1.59% L::Iterator<L::Indexing<1, 1>>::Iterator(_Heap::_Pos<Nodes::_ObSignature>)
  * 1.58% void E::insert<ARL>(_Heap::_Pos<Nodes::_ESignature>)
(N3) neglecting order, a structure with ~4000 Obs can be built in a few hours.  
 

(2006:01:13)
(N1) with an app table and dense_set iterators for Lxx_ and Rxx_
  total time = 6463.43 seconds
  most enforcement time is taken in [!= theorems, in particular the app_N's.
(N2) with app table for find_app but subheap iterators for Lxx_ and Rxx_
  total time = 9398.61 seconds
  most enforcement is still in [!= theorems

(2006:01:09)
total time = 868.99 sec
(N1) enforcement
  * 77.0% E_pos
  * 35.5% E_C_E
  * 25.9% E_S_E
  * 14.8% E_C_E5
  * 13.6% E_B_E
  * 10.4% E_neg
  * 10.3% E_app_neg
  *  9.6% E_S_E6
  *  8.4% E_C_E3
  *  7.4% N_neg
  *  6.9% E_S_E3
  *  6.7% N_app_neg
  *  5.9% E_C_E2
  *  5.8% E_C_E4
  *  4.9% E_B_E3
  *  4.6% E_associativity_E
  *  3.6% E_associativity_E6
  *  3.5% N_app_N1
  *  3.4% E_app_N3
  *  3.3% N_app_N2
  ...
(N2) lookup
  * 48.0% find_app
(N2) eqn subheaps:
  * 215.76 Indexing<LRA>::findKey
  * 110.97 heap_Hindex
  *  97.64 E::key<LRA>
  * ... ObHdl and ObName stuff takes alot of time too

(2006:01:08)

(N1) enforcement
  #by major theorem
  * 51.9 enforce_E_pos
  * 22.4 enforce_E_neg
  *  9.6 enforce_L_pos
  *  8.9 enforce_L_neg
  #by minor theorem
  * 19.7 enforce_E_S_E
  * 15.5 enforce_E_C_E
  * 12.2 enforce_E_B_E
  *  8.9 enforce_L_app_neg
  *  3.9 enforce_E_app_pos
  #individually
  * 11.4 enforce_E_app_N3
  *  8.8 enforce_L_app_L2
  *  8.3 enforce_L_app_N2 #mostly in LRA iteration
  *  7.3 enforce_E_app_N4
  *  6.8 enforce_E_S_E6
  *  6.6 enforce_E_S_E3
  *  6.1 enforce_E_B_E3
  *  6.1 enforce_E_C_E3
  *  5.2 enforce_E_C_E5
  *  3.4 enforce_E_C_E1
  *  2.9 enforce_E_S_E5
  *  2.5 enforce_E_B_E4
  *  2.4 enforce_N_app_N1
  *  2.4 enforce_N_app_N2
  *  2.5 enforce_E_B_E4
  *  2.0 enforce_E_app_L1
  *  1.9 enforce_E_app_N2
  *  1.9 enforce_E_app_L2
  *  1.9 enforce_E_S_E1
  *  1.8 enforce_E_app_N1
  *  1.0 enforce_E_S_E2
  #less than 1
(N2) eqn subheaps:
  * 24.1 Eqn::Iterator<LRA>::increment()
  * 16.8 Eqn::Iterator<ALR>::findKey()
  * 12.6 Eqn::Iterator<LRA>::top()
  *  9.5 Eqn::Iterator<ALR>::top()
  ...
  * 14.45 find_ldiv
  * 11.02 find_app

